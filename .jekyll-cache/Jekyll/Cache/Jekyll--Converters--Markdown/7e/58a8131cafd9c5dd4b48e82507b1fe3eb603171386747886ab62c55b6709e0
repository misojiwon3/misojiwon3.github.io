I".4<h3 id="testing-styles">Testing Styles</h3>

<h4 id="funsuite">FunSuite</h4>
<ul>
  <li>xUnit과 유사한 형태</li>
  <li>test 이름들을 서술적으로 작성하여 집중도가 높으며 Communication에 용이</li>
</ul>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SetSuite</span> <span class="k">extends</span> <span class="nc">FunSuite</span> <span class="o">{</span>
  <span class="nf">test</span><span class="o">(</span><span class="s">"An empty Set should have size 0"</span><span class="o">)</span> <span class="o">{</span>
    <span class="nf">assert</span><span class="o">(</span><span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
  <span class="o">}</span>

  <span class="nf">test</span><span class="o">(</span><span class="s">"Invoking head on an empty Set should produce NoSuchElementException"</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertThrows</span><span class="o">[</span><span class="kt">NoSuchElementException</span><span class="o">]</span> <span class="o">{</span>
      <span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">head</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="flatspec">FlatSpec</h4>
<ul>
  <li>xUnit과 일부 유사한 면이 있음</li>
  <li>필요한 동작을 지정하는 문장과 테스트 블록으로 구성</li>
  <li>문장에는 <code class="language-plaintext highlighter-rouge">A Stack</code>과 같은 제목이 필요하며 동사는 <code class="language-plaintext highlighter-rouge">should</code>, <code class="language-plaintext highlighter-rouge">must</code>, <code class="language-plaintext highlighter-rouge">can</code> 등이 사용됨</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"A Stack" should "pop values in last-in-first-out order"
</code></pre></div></div>

<ul>
  <li>동일 주제에 대해 여러 테스트를 진행하고자 할 경우 <code class="language-plaintext highlighter-rouge">it</code>을 사용</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>it should "throw NoSuchElementException if an empty stack is popped"
</code></pre></div></div>

<ul>
  <li>문장의 뒤에는 <code class="language-plaintext highlighter-rouge">in</code>을 추가</li>
  <li>테스트 이름이 <code class="language-plaintext highlighter-rouge">X should Y</code>, <code class="language-plaintext highlighter-rouge">A must B</code> 등으로 표현되어야 함</li>
</ul>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SetSpec</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="o">{</span>
  <span class="s">"An empty Set"</span> <span class="n">should</span> <span class="s">"have size 0"</span> <span class="n">in</span> <span class="o">{</span>
    <span class="nf">assert</span><span class="o">(</span><span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
  <span class="o">}</span>

  <span class="n">it</span> <span class="n">should</span> <span class="s">"produce NoSuchElementException when head is invoked"</span> <span class="n">in</span> <span class="o">{</span>
    <span class="n">assertThrows</span><span class="o">[</span><span class="kt">NoSuchElementException</span><span class="o">]</span> <span class="o">{</span>
      <span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">head</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="funspec">FunSpec</h4>
<ul>
  <li>Ruby의 RSpec tool과 유사</li>
  <li>중첩과 구조적 텍스트(describe, it)를 사용</li>
</ul>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SetSpec</span> <span class="k">extends</span> <span class="nc">FunSpec</span> <span class="o">{</span>
  <span class="nf">describe</span><span class="o">(</span><span class="s">"A Set"</span><span class="o">)</span> <span class="o">{</span>
    <span class="nf">describe</span><span class="o">(</span><span class="s">"when empty"</span><span class="o">)</span> <span class="o">{</span>
      <span class="nf">it</span><span class="o">(</span><span class="s">"should have size 0"</span><span class="o">)</span> <span class="o">{</span>
        <span class="nf">assert</span><span class="o">(</span><span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
      <span class="o">}</span>

      <span class="nf">it</span><span class="o">(</span><span class="s">"should produce NoSuchElementException when head is invoked"</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">assertThrows</span><span class="o">[</span><span class="kt">NoSuchElementException</span><span class="o">]</span> <span class="o">{</span>
          <span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">head</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="wordspec">WordSpec</h4>
<ul>
  <li>specs or specs2와 유사</li>
  <li>매우 규격적인 텍스트를 요구함</li>
</ul>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SetSpec</span> <span class="k">extends</span> <span class="nc">WordSpec</span> <span class="o">{</span>
  <span class="s">"A Set"</span> <span class="n">when</span> <span class="o">{</span>
    <span class="s">"empty"</span> <span class="n">should</span> <span class="o">{</span>
      <span class="s">"have size 0"</span> <span class="n">in</span> <span class="o">{</span>
        <span class="nf">assert</span><span class="o">(</span><span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
      <span class="o">}</span>

      <span class="s">"produce NoSuchElementException when head is invoked"</span> <span class="n">in</span> <span class="o">{</span>
        <span class="n">assertThrows</span><span class="o">[</span><span class="kt">NoSuchElementException</span><span class="o">]</span> <span class="o">{</span>
          <span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">head</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="freespec">FreeSpec</h4>
<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SetSpec</span> <span class="k">extends</span> <span class="nc">FreeSpec</span> <span class="o">{</span>

  <span class="s">"A Set"</span> <span class="o">-</span> <span class="o">{</span>
    <span class="s">"when empty"</span> <span class="o">-</span> <span class="o">{</span>
      <span class="s">"should have size 0"</span> <span class="n">in</span> <span class="o">{</span>
        <span class="nf">assert</span><span class="o">(</span><span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
      <span class="o">}</span>

      <span class="s">"should produce NoSuchElementException when head is invoked"</span> <span class="n">in</span> <span class="o">{</span>
        <span class="n">assertThrows</span><span class="o">[</span><span class="kt">NoSuchElementException</span><span class="o">]</span> <span class="o">{</span>
          <span class="nv">Set</span><span class="o">.</span><span class="py">empty</span><span class="o">.</span><span class="py">head</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="propspec">PropSpec</h4>
<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SetSpec</span> <span class="k">extends</span> <span class="nc">PropSpec</span> <span class="k">with</span> <span class="nc">TableDrivenPropertyChecks</span> <span class="k">with</span> <span class="nc">Matchers</span> <span class="o">{</span>
  <span class="k">val</span> <span class="nv">examples</span> <span class="k">=</span>
    <span class="nc">Table</span><span class="o">(</span>
      <span class="s">"set"</span><span class="o">,</span>
      <span class="nv">BitSet</span><span class="o">.</span><span class="py">empty</span><span class="o">,</span>
      <span class="nv">HashSet</span><span class="o">.</span><span class="py">empty</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span>
      <span class="nv">TreeSet</span><span class="o">.</span><span class="py">empty</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
    <span class="o">)</span>

  <span class="nf">property</span><span class="o">(</span><span class="s">"an empty Set should have size 0"</span><span class="o">)</span> <span class="o">{</span>
    <span class="nf">forAll</span><span class="o">(</span><span class="n">examples</span><span class="o">)</span> <span class="o">{</span> <span class="n">set</span> <span class="k">=&gt;</span>
      <span class="nv">set</span><span class="o">.</span><span class="py">size</span> <span class="n">should</span> <span class="nf">be</span> <span class="o">(</span><span class="mi">0</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="nf">property</span><span class="o">(</span><span class="s">"invoking head on an empty set should produce NoSuchElementException"</span><span class="o">)</span> <span class="o">{</span>
    <span class="nf">forAll</span><span class="o">(</span><span class="n">examples</span><span class="o">)</span> <span class="o">{</span> <span class="n">set</span> <span class="k">=&gt;</span>
       <span class="n">a</span> <span class="o">[</span><span class="kt">NoSuchElementException</span><span class="o">]</span> <span class="n">should</span> <span class="n">be</span> <span class="n">thrownBy</span> <span class="o">{</span> <span class="nv">set</span><span class="o">.</span><span class="py">head</span> <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="base-class-지정">Base Class 지정</h3>
<ul>
  <li>ScalaTest는 테스트에 필요한 trait들을 mix한 abstract base class를 프로젝트 내에 생성할 것을 권장</li>
</ul>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.mycompany.myproject</span>

<span class="k">import</span> <span class="nn">org.scalatest._</span>

<span class="k">abstract</span> <span class="k">class</span> <span class="nc">UnitSpec</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">Matchers</span> <span class="k">with</span>
  <span class="nc">OptionValues</span> <span class="k">with</span> <span class="nc">Inside</span> <span class="k">with</span> <span class="nc">Inspectors</span>
</code></pre></div></div>
<p>기본 클래스를 토대로 특성에 맞는 테스트 클래스를 작성한다.
(e.g. ActorSysSpec, DBSpec, etc)</p>
<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DBSpec</span> <span class="k">extends</span> <span class="nc">UnitSpec</span> <span class="o">{</span>
	<span class="c1">// some test codes ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="run">Run</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># with jar file
scalac -cp scalatest-app_2.12.4-3.0.5.jar StackSpec.scala

# with Simple Runner
scala -cp scalatest-app_2.12.4-3.0.5.jar org.scalatest.run StackSpec

# with ScalaTest shell
scala -cp scalatest_2.12.4-3.0.5.jar
</code></pre></div></div>
:ET